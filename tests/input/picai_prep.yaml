# https://learnxinyminutes.com/docs/yaml/

# Number of threads for multiprocessing
num_threads: int = 4

# Logging verbosity level 0-2
# 0: No log
# 1: ...
# 2: ...
verbose: 1

# Add additional DICOM tags not found in dicom_tags.py
additional_tags:
  0020|0017: "SomeSpecialDICOMTag"

# Database mapping options
database:
  # each key mapping here results in selected dcm files to be converted to out_dir given the path (out_dir / path)
  # either a map of { key: list of str } ...
  - mapping:
      path: "/{PatientID}/{StudyInstanceUID}/{SeriesInstanceUID}_adc"
      query:
        SeriesDescription:
          ["ep2d_diff_tra_DYNDIST_MIX_ADC", "ep2d_diff_tra_DYNDIST_ADC"]
  # or a SQL SELECT query, use `FROM DICOM`
  # could just allow WHERE, always prefacing the query value with "SELECT * FROM DICOMS " + query
  - mapping:
      path: "/{PatientID}/{StudyInstanceUID}/{SeriesInstanceUID}_hbv"
      query: >-
        SELECT 
          SeriesDescription 
        FROM DICOM WHERE 
          SeriesDescription REGEXP "ep2d_diff_tra_DYN.*"
    
# dcm2mha conversion options
dcm2mha:
  # Verify DICOM filenames have increasing numbers, with no gaps
  verify_dicom_filenames: True
  # Rather than using a tiebreaker for duplicate DICOM files, append a index suffix to the filename
  allow_duplicates: False
  # due to SQL, this is probably deprecated
  metadata_match_func: None
  # due to SQL, this is probably deprecated
  values_match_func: None
  # write usage here
  scan_postprocess_func: None

# mha2nnunet conversion options
mha2nnunet:
  # write usage here
  preprocessing:
    matrix_size: Optional[Iterable[int]] = None
    spacing: Optional[Iterable[float]] = None
    physical_size: Optional[Iterable[float]] = None
    crop_only: bool = False
    align_segmentation: Optional[sitk.Image] = None
  # target directory of converted scans
  scans_dirname: imagesTr
  # target directory of converted annotations
  annotation_dirname: labelsTr
  # write usage here
  annotation_preprocess_func: Optional[Callable[[sitk.Image], sitk.Image]] = None
  # write usage here
  annotation_postprocess_func: Optional[Callable[[sitk.Image], sitk.Image]] = None
  # write usage here
  scan_preprocess_func: Optional[Callable[[sitk.Image], sitk.Image]] = None
  # write usage here
  scan_postprocess_func: Optional[Callable[[sitk.Image], sitk.Image]] = None